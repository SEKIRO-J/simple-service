syntax = "proto3";

package api.protos.v1;

import "google/protobuf/struct.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "protoc-gen-openapiv2/options/annotations.proto";


option go_package = "github.com/sekiro-j/metapierbackend/api/protos/v1;metapierv1";

option java_multiple_files = true;
option java_package = "org.metapier";
option java_outer_classname = "MetaPierProto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    version: "1.0";
  };
  host: "localhost:8080";
  schemes: HTTP;
};

service MetaPierService {
  rpc UpdateFEMD(UpdateFEMDRequest) returns (FEMD) {
      option (google.api.http) = {
          post: "/v1/metadata"
          body: "femd"
      };
  }

  rpc GetFEMD(GetFEMDRequest) returns (FEMD) {}

  rpc CreateProject(CreateProjectRequest) returns (Project) {
    option (google.api.http) = {
      post: "/v1/projects"
      body: "project"
    };
    option (google.api.method_signature) = "project";
  }
      
  rpc CreateAuction(CreateAuctionRequest) returns (Auction) {
    option (google.api.http) = {
      post: "/v1/{parent=projects/*}/auctions"
      body: "auction"
    };

    option (google.api.method_signature) = "parent,auction";
  }

  rpc ListAuctions(ListAuctionsRequest) returns (ListAuctionsResponse) {
      option (google.api.http) = {
        get: "/v1/{parent=projects/*}/auctions"
      };
  }

  rpc BatchCreateEvents(BatchCreateEventsRequest) returns (BatchCreateEventsResponse) {
    option (google.api.http) = {
      post: "/v1/events:batchCreate"
      body: "*"
    };
  }

  rpc ListEvents(ListEventsRequest) returns (ListEventsResponse) {
      option (google.api.http) = {
        get:  "/v1/events"
      };
  }


}

message UpdateFEMDRequest {
  FEMD femd = 1;
}

message GetFEMDRequest {}

message FEMD {
  string version_hash = 1;
  string price_fetch_interval = 2;
  string env = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
}

message CreateProjectRequest {
  Project project = 1 [(google.api.field_behavior) = REQUIRED];
}

message CreateAuctionRequest {
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      child_type: "metapier.com/Auction"
    }];
  
  Auction auction = 2 [(google.api.field_behavior) = REQUIRED];
}

message ListAuctionsRequest {
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      child_type: "metapier.com/Auction"
    }];
  
  int32 page_size =  2;

  string page_token = 3;
  
  string filter = 4;
}

message ListAuctionsResponse {

  repeated Auction auctions = 1 [(google.api.field_behavior) = UNORDERED_LIST];
  
  string next_page_token = 2;
}

message BatchCreateEventsRequest {  
  EventsPayload payload = 1 [(google.api.field_behavior) = REQUIRED];
  HMAC hmac = 2 [(google.api.field_behavior) = OPTIONAL];
}

message BatchCreateEventsResponse {  
  repeated Event events = 1;
}

message ListEventsRequest {
  
  int32 page_size =  1;

  string page_token = 2;
  
  string filter = 3;
}

message ListEventsResponse {

  repeated Event events = 1 [(google.api.field_behavior) = UNORDERED_LIST];
  
  string next_page_token = 2;
}

message Auction {
  option (google.api.resource) = {
    type: "metapier.com/Auction",
    pattern: "projects/{project}/auctions/{auction}"
  };
  string name = 1;
  string project_id = 2;
  string pool_id = 3;
  string sale_type = 4;
  float offer = 5;
  float remaining = 6;
  string fund_token_id = 7; 
  float target = 8;
  Token fund_token = 9;
  Project project  = 10;
  google.protobuf.Struct stages = 11;
}

message Project {
  option (google.api.resource) = {
    type: "metapier.com/Project",
    pattern: "projects/{project}"
  };
  string name = 1;
  string display_name = 2;
  string description = 3;
  string logo = 4;
  string token_id = 5;
  float max_supply = 6;
  float init_supply = 7;
  google.protobuf.Struct links = 8;
  Token token = 9 [(google.api.field_behavior) = OUTPUT_ONLY];
}

message Token {
  option (google.api.resource) = {
    type: "metapier.com/Token",
    pattern: "tokens/{token}"
  };
  string name = 1;
  string display_name = 2;
  string symbol = 3;
  string logo = 4;
  string addr = 5;
}

message EventsPayload {
  int32 timestamp = 1;
  EventData data = 2;
}

message EventData {
  string transaction_id = 1;
  int32 block_height = 2;
  repeated Event events = 3;
}

message Event {
  option (google.api.resource) = {
    type: "metapier.com/Event",
    pattern: "events/{event}"
  };

  string block_id = 1;
  int32 block_height = 2;
  google.protobuf.Timestamp block_timestamp = 3;
  string transaction_id = 4;
  int32 transaction_index = 5;
  int32 event_index = 6;
  string type = 7;
  google.protobuf.Struct data = 8;
}

message HMAC {
  string nonce = 1;
  string hash = 2;
}
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/protos/v1/metapier.proto

package metapierv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetaPierServiceClient is the client API for MetaPierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetaPierServiceClient interface {
	UpdateFEMD(ctx context.Context, in *UpdateFEMDRequest, opts ...grpc.CallOption) (*FEMD, error)
	GetFEMD(ctx context.Context, in *GetFEMDRequest, opts ...grpc.CallOption) (*FEMD, error)
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*Project, error)
	CreateAuction(ctx context.Context, in *CreateAuctionRequest, opts ...grpc.CallOption) (*Auction, error)
	ListAuctions(ctx context.Context, in *ListAuctionsRequest, opts ...grpc.CallOption) (*ListAuctionsResponse, error)
	BatchCreateEvents(ctx context.Context, in *BatchCreateEventsRequest, opts ...grpc.CallOption) (*BatchCreateEventsResponse, error)
	ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error)
}

type metaPierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetaPierServiceClient(cc grpc.ClientConnInterface) MetaPierServiceClient {
	return &metaPierServiceClient{cc}
}

func (c *metaPierServiceClient) UpdateFEMD(ctx context.Context, in *UpdateFEMDRequest, opts ...grpc.CallOption) (*FEMD, error) {
	out := new(FEMD)
	err := c.cc.Invoke(ctx, "/api.protos.v1.MetaPierService/UpdateFEMD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaPierServiceClient) GetFEMD(ctx context.Context, in *GetFEMDRequest, opts ...grpc.CallOption) (*FEMD, error) {
	out := new(FEMD)
	err := c.cc.Invoke(ctx, "/api.protos.v1.MetaPierService/GetFEMD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaPierServiceClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/api.protos.v1.MetaPierService/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaPierServiceClient) CreateAuction(ctx context.Context, in *CreateAuctionRequest, opts ...grpc.CallOption) (*Auction, error) {
	out := new(Auction)
	err := c.cc.Invoke(ctx, "/api.protos.v1.MetaPierService/CreateAuction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaPierServiceClient) ListAuctions(ctx context.Context, in *ListAuctionsRequest, opts ...grpc.CallOption) (*ListAuctionsResponse, error) {
	out := new(ListAuctionsResponse)
	err := c.cc.Invoke(ctx, "/api.protos.v1.MetaPierService/ListAuctions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaPierServiceClient) BatchCreateEvents(ctx context.Context, in *BatchCreateEventsRequest, opts ...grpc.CallOption) (*BatchCreateEventsResponse, error) {
	out := new(BatchCreateEventsResponse)
	err := c.cc.Invoke(ctx, "/api.protos.v1.MetaPierService/BatchCreateEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaPierServiceClient) ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error) {
	out := new(ListEventsResponse)
	err := c.cc.Invoke(ctx, "/api.protos.v1.MetaPierService/ListEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetaPierServiceServer is the server API for MetaPierService service.
// All implementations should embed UnimplementedMetaPierServiceServer
// for forward compatibility
type MetaPierServiceServer interface {
	UpdateFEMD(context.Context, *UpdateFEMDRequest) (*FEMD, error)
	GetFEMD(context.Context, *GetFEMDRequest) (*FEMD, error)
	CreateProject(context.Context, *CreateProjectRequest) (*Project, error)
	CreateAuction(context.Context, *CreateAuctionRequest) (*Auction, error)
	ListAuctions(context.Context, *ListAuctionsRequest) (*ListAuctionsResponse, error)
	BatchCreateEvents(context.Context, *BatchCreateEventsRequest) (*BatchCreateEventsResponse, error)
	ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error)
}

// UnimplementedMetaPierServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMetaPierServiceServer struct {
}

func (UnimplementedMetaPierServiceServer) UpdateFEMD(context.Context, *UpdateFEMDRequest) (*FEMD, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFEMD not implemented")
}
func (UnimplementedMetaPierServiceServer) GetFEMD(context.Context, *GetFEMDRequest) (*FEMD, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFEMD not implemented")
}
func (UnimplementedMetaPierServiceServer) CreateProject(context.Context, *CreateProjectRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedMetaPierServiceServer) CreateAuction(context.Context, *CreateAuctionRequest) (*Auction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuction not implemented")
}
func (UnimplementedMetaPierServiceServer) ListAuctions(context.Context, *ListAuctionsRequest) (*ListAuctionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuctions not implemented")
}
func (UnimplementedMetaPierServiceServer) BatchCreateEvents(context.Context, *BatchCreateEventsRequest) (*BatchCreateEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateEvents not implemented")
}
func (UnimplementedMetaPierServiceServer) ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}

// UnsafeMetaPierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetaPierServiceServer will
// result in compilation errors.
type UnsafeMetaPierServiceServer interface {
	mustEmbedUnimplementedMetaPierServiceServer()
}

func RegisterMetaPierServiceServer(s grpc.ServiceRegistrar, srv MetaPierServiceServer) {
	s.RegisterService(&MetaPierService_ServiceDesc, srv)
}

func _MetaPierService_UpdateFEMD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFEMDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaPierServiceServer).UpdateFEMD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.protos.v1.MetaPierService/UpdateFEMD",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaPierServiceServer).UpdateFEMD(ctx, req.(*UpdateFEMDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaPierService_GetFEMD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFEMDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaPierServiceServer).GetFEMD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.protos.v1.MetaPierService/GetFEMD",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaPierServiceServer).GetFEMD(ctx, req.(*GetFEMDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaPierService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaPierServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.protos.v1.MetaPierService/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaPierServiceServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaPierService_CreateAuction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaPierServiceServer).CreateAuction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.protos.v1.MetaPierService/CreateAuction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaPierServiceServer).CreateAuction(ctx, req.(*CreateAuctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaPierService_ListAuctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuctionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaPierServiceServer).ListAuctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.protos.v1.MetaPierService/ListAuctions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaPierServiceServer).ListAuctions(ctx, req.(*ListAuctionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaPierService_BatchCreateEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaPierServiceServer).BatchCreateEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.protos.v1.MetaPierService/BatchCreateEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaPierServiceServer).BatchCreateEvents(ctx, req.(*BatchCreateEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaPierService_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaPierServiceServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.protos.v1.MetaPierService/ListEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaPierServiceServer).ListEvents(ctx, req.(*ListEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetaPierService_ServiceDesc is the grpc.ServiceDesc for MetaPierService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetaPierService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.protos.v1.MetaPierService",
	HandlerType: (*MetaPierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateFEMD",
			Handler:    _MetaPierService_UpdateFEMD_Handler,
		},
		{
			MethodName: "GetFEMD",
			Handler:    _MetaPierService_GetFEMD_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _MetaPierService_CreateProject_Handler,
		},
		{
			MethodName: "CreateAuction",
			Handler:    _MetaPierService_CreateAuction_Handler,
		},
		{
			MethodName: "ListAuctions",
			Handler:    _MetaPierService_ListAuctions_Handler,
		},
		{
			MethodName: "BatchCreateEvents",
			Handler:    _MetaPierService_BatchCreateEvents_Handler,
		},
		{
			MethodName: "ListEvents",
			Handler:    _MetaPierService_ListEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/protos/v1/metapier.proto",
}
